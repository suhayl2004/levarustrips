import { NgModule, Optional } from '@angular/core';
import { FeatherComponent } from './feather.component';
import { Icons } from './icons.provider';
import * as i0 from "@angular/core";
import * as i1 from "./icons.provider";
export class FeatherModule {
    constructor(icons) {
        this.icons = icons;
        if (!this.icons) {
            throw new Error(`No icon provided. Make sure to use 'FeatherModule.pick({ ... })' when importing the module\n` +
                `Refer to documentation on https://github.com/michaelbazos/angular-feather`);
        }
    }
    static pick(icons) {
        return {
            ngModule: FeatherModule,
            providers: [
                { provide: Icons, multi: true, useValue: icons }
            ]
        };
    }
}
FeatherModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: FeatherModule, deps: [{ token: i1.Icons, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
FeatherModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: FeatherModule, declarations: [FeatherComponent], exports: [FeatherComponent] });
FeatherModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: FeatherModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: FeatherModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        FeatherComponent
                    ],
                    exports: [
                        FeatherComponent
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.Icons, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdGhlci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWZlYXRoZXIvc3JjL2xpYi9mZWF0aGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFXekMsTUFBTSxPQUFPLGFBQWE7SUFDeEIsWUFDc0IsS0FBWTtRQUFaLFVBQUssR0FBTCxLQUFLLENBQU87UUFFaEMsSUFBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FDYiw4RkFBOEY7Z0JBQzlGLDJFQUEyRSxDQUM1RSxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUE4QjtRQUN4QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGFBQWE7WUFDdkIsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7YUFDakQ7U0FDRixDQUFDO0lBQ0osQ0FBQzs7MkdBbkJVLGFBQWE7NEdBQWIsYUFBYSxpQkFOdEIsZ0JBQWdCLGFBR2hCLGdCQUFnQjs0R0FHUCxhQUFhOzRGQUFiLGFBQWE7a0JBUnpCLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFO3dCQUNaLGdCQUFnQjtxQkFDakI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLGdCQUFnQjtxQkFDakI7aUJBQ0Y7OzBCQUdJLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZlYXRoZXJDb21wb25lbnQgfSBmcm9tICcuL2ZlYXRoZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEljb25zIH0gZnJvbSAnLi9pY29ucy5wcm92aWRlcic7XG5cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRmVhdGhlckNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgRmVhdGhlckNvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEZlYXRoZXJNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGljb25zOiBJY29uc1xuICApIHtcbiAgICBpZiAoICF0aGlzLmljb25zICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgTm8gaWNvbiBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIHVzZSAnRmVhdGhlck1vZHVsZS5waWNrKHsgLi4uIH0pJyB3aGVuIGltcG9ydGluZyB0aGUgbW9kdWxlXFxuYCArXG4gICAgICAgIGBSZWZlciB0byBkb2N1bWVudGF0aW9uIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNoYWVsYmF6b3MvYW5ndWxhci1mZWF0aGVyYFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcGljayhpY29uczoge1trZXk6IHN0cmluZ106IHN0cmluZ30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEZlYXRoZXJNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEZlYXRoZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBJY29ucywgbXVsdGk6IHRydWUsIHVzZVZhbHVlOiBpY29ucyB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19